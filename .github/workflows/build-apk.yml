name: Build Android APK (Release + Debug)

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]
    tags: [ "v*", "release-*" ]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    env:
      APP_NAME: Cascade Canvassing
      ANDROID_SDK_PLATFORM: "platforms;android-34"
      ANDROID_BUILD_TOOLS: "build-tools;34.0.0"
      ANDROID_PLATFORM_TOOLS: "platform-tools"
      GRADLE_VERSION: "8.7"
      GRADLE_OPTS: "-Dorg.gradle.caching.debug=true -Dorg.gradle.jvmargs='-Xmx2g -Dfile.encoding=UTF-8'"
      KEYSTORE_B64: ${{ secrets.KEYSTORE }}
      KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
      KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
      KEY_ALIAS_PASSWORD: ${{ secrets.KEY_ALIAS_PASSWORD }}
      SHEETS_ENDPOINT: ${{ secrets.SHEETS_ENDPOINT }}

    steps:
      - name: Set up job
        run: echo "Starting build for $APP_NAME"

      - name: Checkout
        uses: actions/checkout@v4

      # Safety net: create Gradle wrapper if missing in repo
      - name: Bootstrap Gradle wrapper if missing
        shell: bash
        run: |
          set -euo pipefail
          if [[ ! -f "android/gradlew" || ! -f "android/gradle/wrapper/gradle-wrapper.jar" ]]; then
            echo "::notice::Gradle wrapper missing; bootstrapping with Gradle ${GRADLE_VERSION}..."
            sudo apt-get update -y >/dev/null
            sudo apt-get install -y zip unzip >/dev/null
            curl -s "https://get.sdkman.io" | bash
            source "$HOME/.sdkman/bin/sdkman-init.sh"
            yes | sdk install gradle "${GRADLE_VERSION}"
            ( cd android && gradle wrapper --gradle-version "${GRADLE_VERSION}" )
            chmod +x android/gradlew
          else
            echo "Gradle wrapper present."
          fi

      - name: Prepare assets (index.html & app.settings.json)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p android/app/src/main/assets
          if [[ -f "index.html" ]]; then
            cp index.html android/app/src/main/assets/index.html
          else
            printf '%s\n' '<!doctype html><html><head><meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1"><title>Cascade</title></head><body><h1>Placeholder UI</h1></body></html>' > android/app/src/main/assets/index.html
          fi
          if [[ -f "app.settings.json" ]]; then
            cp app.settings.json android/app/src/main/assets/app.settings.json
          else
            printf '%s\n' "{\"sheetsEndpoint\":\"${SHEETS_ENDPOINT:-}\"}" > android/app/src/main/assets/app.settings.json
          fi
          ls -la android/app/src/main/assets

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Android SDK components (robust)
        shell: bash
        run: |
          set -euo pipefail
          Pkgs=( "${ANDROID_PLATFORM_TOOLS}" "${ANDROID_BUILD_TOOLS}" "${ANDROID_SDK_PLATFORM}" )
          for p in "${Pkgs[@]}"; do
            echo "Installing $p ..."
            sdkmanager "$p" || { echo "Retry $p after short sleep"; sleep 5; sdkmanager "$p"; }
          done
          yes "y" | sdkmanager --licenses >/dev/null 2>&1 || true

      # Configure signing for Release only (skips if secrets missing)
      - name: Configure signing (gradle.properties, guarded)
        shell: bash
        env:
          KEYSTORE_B64: ${{ secrets.KEYSTORE }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_ALIAS_PASSWORD: ${{ secrets.KEY_ALIAS_PASSWORD }}
        run: |
          set -euo pipefail
          PROP_FILE="android/gradle.properties"
          ( [[ -f "$PROP_FILE" ]] && grep -v '^MYAPP_' "$PROP_FILE" || true ) > "$PROP_FILE.tmp" || true
          mv "$PROP_FILE.tmp" "$PROP_FILE"
          if [[ -n "${KEYSTORE_B64:-}" && -n "${KEYSTORE_PASSWORD:-}" && -n "${KEY_ALIAS:-}" && -n "${KEY_ALIAS_PASSWORD:-}" ]]; then
            echo "Decoding keystore to android/app/upload.keystore"
            echo "$KEYSTORE_B64" | base64 -d > android/app/upload.keystore
            {
              echo "MYAPP_STORE_FILE=app/upload.keystore"
              echo "MYAPP_STORE_PASSWORD=${KEYSTORE_PASSWORD}"
              echo "MYAPP_KEY_ALIAS=${KEY_ALIAS}"
              echo "MYAPP_KEY_PASSWORD=${KEY_ALIAS_PASSWORD}"
            } >> "$PROP_FILE"
            echo "Signing props set with path app/upload.keystore"
          else
            echo "::notice::Signing secrets missing; Release may be unsigned (Debug will still build)."
          fi
          grep -q '^android.useAndroidX=' "$PROP_FILE" || echo 'android.useAndroidX=true' >> "$PROP_FILE"
          grep -q '^android.enableJetifier=' "$PROP_FILE" || echo 'android.enableJetifier=true' >> "$PROP_FILE"

      - name: Grant gradlew execute
        run: chmod +x android/gradlew

      # Disable Gradle cache to avoid cache-service issues
      - name: Setup Gradle (no cache; avoid post-step failure)
        uses: gradle/actions/setup-gradle@v3
        with:
          cache-disabled: true

      - name: Prep build logs
        run: mkdir -p android/build-logs

      # ---------- Build Debug (always) ----------
      - name: Build Debug APK
        working-directory: android
        timeout-minutes: 20
        env:
          GRADLE_OPTS: ${{ env.GRADLE_OPTS }}
        run: |
          set -euo pipefail
          ./gradlew assembleDebug --no-daemon --stacktrace --info --warning-mode all --console=plain 2>&1 | tee build-logs/assembleDebug.log

      - name: Locate Debug APK
        id: find_debug_apk
        run: |
          set -euo pipefail
          echo "Listing debug outputs in android/app/build/outputs/apk/debug:"
          ls -la android/app/build/outputs/apk/debug || true
          DAPK=$(find android/app/build/outputs/apk/debug -type f -name "*-debug.apk" -print -quit)
          if [[ -z "$DAPK" ]]; then
            echo "::error::Debug APK not found in android/app/build/outputs/apk/debug"
            exit 1
          fi
          echo "debug_apk=$DAPK" >> "$GITHUB_OUTPUT"
          echo "Found Debug APK at $DAPK"

      - name: Upload Debug APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: cascade-canvassing-debug-apk
          path: ${{ steps.find_debug_apk.outputs.debug_apk }}
          if-no-files-found: error
          compression-level: 6
          retention-days: 14

      # ---------- Build Release (signed if secrets present) ----------
      - name: Build Release APK
        working-directory: android
        timeout-minutes: 25
        env:
          GRADLE_OPTS: ${{ env.GRADLE_OPTS }}
        run: |
          set -euo pipefail
          ./gradlew assembleRelease --no-daemon --stacktrace --info --warning-mode all --console=plain 2>&1 | tee build-logs/assembleRelease.log

      - name: Print last 500 lines of Release build log (on failure)
        if: failure()
        run: |
          echo "===== tail assembleRelease.log ====="
          tail -n 500 android/build-logs/assembleRelease.log || true
          echo "===== grep FAILURE / ERROR ====="
          (grep -n -E 'FAILURE:|^> Task .* FAILED|^Caused by:|error: ' android/build-logs/assembleRelease.log || true)

      - name: Locate Release APK (robust)
        id: find_release_apk
        shell: bash
        run: |
          set -euo pipefail
          REL_DIR="android/app/build/outputs/apk/release"
          echo "Listing release outputs in $REL_DIR:"
          ls -la "$REL_DIR" || true

          # Prefer signed release; fallback to unsigned if signing skipped
          RAPK=$(find "$REL_DIR" -type f -name "*-release.apk" -print -quit)
          if [[ -z "$RAPK" ]]; then
            RAPK=$(find "$REL_DIR" -type f -name "*-release-unsigned.apk" -print -quit)
          fi

          if [[ -z "$RAPK" ]]; then
            echo "::error::Release APK not found in $REL_DIR"
            exit 1
          fi
          echo "release_apk=$RAPK" >> "$GITHUB_OUTPUT"
          echo "Found Release APK at $RAPK"

      # Verify only the Release APK signature (Debug uses debug keystore)
      - name: Verify Release APK signature (skip if unsigned)
        shell: bash
        run: |
          set -euo pipefail
          APK="${{ steps.find_release_apk.outputs.release_apk }}"
          if [[ "$APK" == *"-unsigned.apk" ]]; then
            echo "::notice::Release APK is unsigned (no secrets). Skipping signature verification."
            exit 0
          fi
          TOOL="$ANDROID_SDK_ROOT/build-tools/34.0.0/apksigner"
          if [[ ! -x "$TOOL" ]]; then
            TOOL="$(command -v apksigner || true)"
          fi
          if [[ -z "$TOOL" ]]; then
            echo "::warning::apksigner not available; skipping signature verification."
            exit 0
          fi
          echo "Using apksigner at: $TOOL"
          "$TOOL" verify --print-certs "$APK" || { echo "::error::APK signature verification failed"; exit 1; }

      - name: Upload Release APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: cascade-canvassing-release-apk
          path: ${{ steps.find_release_apk.outputs.release_apk }}
          if-no-files-found: error
          compression-level: 6
          retention-days: 14

      - name: Upload build logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gradle-build-logs
          path: android/build-logs/**
          retention-days: 7

      - name: Publish GitHub Release (Release APK)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.find_release_apk.outputs.release_apk }}
          generate_release_notes: true
