name: Build Android APK

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]
    tags: [ "v*", "release-*" ]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    env:
      APP_NAME: Cascade Canvassing
      ANDROID_SDK_PLATFORM: "platforms;android-34"
      ANDROID_BUILD_TOOLS: "build-tools;34.0.0"
      ANDROID_PLATFORM_TOOLS: "platform-tools"
      GRADLE_VERSION: "8.7"
      GRADLE_OPTS: "-Dorg.gradle.caching.debug=true -Dorg.gradle.jvmargs='-Xmx2g -Dfile.encoding=UTF-8'"
      KEYSTORE_B64: ${{ secrets.KEYSTORE }}
      KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
      KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
      KEY_ALIAS_PASSWORD: ${{ secrets.KEY_ALIAS_PASSWORD }}
      SHEETS_ENDPOINT: ${{ secrets.SHEETS_ENDPOINT }}

    steps:
      - name: Set up job
        run: echo "Starting build for $APP_NAME"

      - name: Checkout
        uses: actions/checkout@v4

      # Safety net: bootstrap Gradle wrapper if missing
      - name: Bootstrap Gradle wrapper if missing
        shell: bash
        run: |
          set -euo pipefail
          if [[ ! -f "android/gradlew" || ! -f "android/gradle/wrapper/gradle-wrapper.jar" ]]; then
            echo "::notice::Gradle wrapper missing; bootstrapping with Gradle ${GRADLE_VERSION}..."
            sudo apt-get update -y >/dev/null
            sudo apt-get install -y zip unzip >/dev/null
            curl -s "https://get.sdkman.io" | bash
            source "$HOME/.sdkman/bin/sdkman-init.sh"
            yes | sdk install gradle "${GRADLE_VERSION}"
            ( cd android && gradle wrapper --gradle-version "${GRADLE_VERSION}" )
            chmod +x android/gradlew
          else
            echo "Gradle wrapper present."
          fi

      - name: Prepare assets (index.html & app.settings.json)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p android/app/src/main/assets

          # index.html
          if [[ -f "index.html" ]]; then
            cp index.html android/app/src/main/assets/index.html
          else
            printf '%s\n' '<!doctype html><html><head><meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1"><title>Cascade</title></head><body><h1>Placeholder UI</h1></body></html>' > android/app/src/main/assets/index.html
          fi

          # app.settings.json
          if [[ -f "app.settings.json" ]]; then
            cp app.settings.json android/app/src/main/assets/app.settings.json
          else
            printf '%s\n' "{\"sheetsEndpoint\":\"${SHEETS_ENDPOINT:-}\"}" > android/app/src/main/assets/app.settings.json
          fi

          ls -la android/app/src/main/assets

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Android SDK components (robust)
        shell: bash
        run: |
          set -euo pipefail
          Pkgs=( "${ANDROID_PLATFORM_TOOLS}" "${ANDROID_BUILD_TOOLS}" "${ANDROID_SDK_PLATFORM}" )
          for p in "${Pkgs[@]}"; do
            echo "Installing $p ..."
            sdkmanager "$p" || { echo "Retry $p after short sleep"; sleep 5; sdkmanager "$p"; }
          done
          # Accept licenses non-interactively; ignore pipe-break exit
          yes "y" | sdkmanager --licenses >/dev/null 2>&1 || true

      - name: Decode keystore (guarded)
        shell: bash
        run: |
          set -euo pipefail
          if [[ -n "${KEYSTORE_B64:-}" ]]; then
            echo "$KEYSTORE_B64" | base64 -d > android/app/upload.keystore
          else
            echo "::notice::No KEYSTORE secret set; continuing unsigned build."
          fi

      - name: Configure signing (gradle.properties, guarded)
        shell: bash
        run: |
          set -euo pipefail
          PROP_FILE="android/gradle.properties"
          touch "$PROP_FILE"
          if [[ -n "${KEYSTORE_PASSWORD:-}" && -n "${KEY_ALIAS:-}" && -n "${KEY_ALIAS_PASSWORD:-}" && -f "android/app/upload.keystore" ]]; then
            {
              echo "MYAPP_STORE_FILE=app/upload.keystore"
              echo "MYAPP_STORE_PASSWORD=${KEYSTORE_PASSWORD}"
              echo "MYAPP_KEY_ALIAS=${KEY_ALIAS}"
              echo "MYAPP_KEY_PASSWORD=${KEY_ALIAS_PASSWORD}"
            } >> "$PROP_FILE"
            echo "Signing properties appended to $PROP_FILE"
          else
            echo "::notice::Signing props not set or keystore missing; APK will be unsigned."
          fi

      - name: Ensure AndroidX flags (safety)
        shell: bash
        run: |
          set -euo pipefail
          touch android/gradle.properties
          grep -q '^android.useAndroidX=' android/gradle.properties || echo 'android.useAndroidX=true' >> android/gradle.properties
          grep -q '^android.enableJetifier=' android/gradle.properties || echo 'android.enableJetifier=true' >> android/gradle.properties

      - name: Grant gradlew execute
        run: chmod +x android/gradlew

      # Cache disabled to avoid service outage failures in post-step
      - name: Setup Gradle (no cache; avoid post-step failure)
        uses: gradle/actions/setup-gradle@v3
        with:
          cache-disabled: true

      - name: Pre-warm Gradle deps
        working-directory: android
        run: |
          ./gradlew --version
          ./gradlew help --no-daemon --stacktrace --info

      - name: Show Android SDK status
        run: |
          echo "JAVA_HOME=$JAVA_HOME"
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT"
          sdkmanager --list | head -n 200 || true

      - name: Prep build log
        run: |
          mkdir -p android/build-logs

      - name: Build release (verbose, bounded)
        working-directory: android
        timeout-minutes: 25
        env:
          GRADLE_OPTS: ${{ env.GRADLE_OPTS }}
        run: |
          set -euo pipefail
          ./gradlew --stop || true
          # run with max verbosity and tee into a file we can upload
          ./gradlew assembleRelease --no-daemon --stacktrace --info --warning-mode all --console=plain 2>&1 | tee build-logs/assembleRelease.log
          ./gradlew --stop || true

      - name: Upload build logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gradle-build-logs
          path: android/build-logs/**
          if-no-files-found: ignore
          retention-days: 7

      - name: Build release (verbose, bounded)
        working-directory: android
        timeout-minutes: 25
        env:
          GRADLE_OPTS: ${{ env.GRADLE_OPTS }}
        run: |
          set -euo pipefail
          ./gradlew --stop || true
          ./gradlew assembleRelease --no-daemon --stacktrace --info
          ./gradlew --stop || true

      - name: Locate APK
        id: find_apk
        run: |
          set -euo pipefail
          APK_PATH=$(find android/app/build/outputs/apk/release -name "*.apk" -type f | head -n 1 || true)
          if [[ -z "$APK_PATH" ]]; then
            echo "::error::APK not found in expected path"
            exit 1
          fi
          echo "apk=$APK_PATH" >> "$GITHUB_OUTPUT"
          echo "Found APK at $APK_PATH"

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: cascade-canvassing-release-apk
          path: ${{ steps.find_apk.outputs.apk }}
          if-no-files-found: error
          compression-level: 6
          retention-days: 14

      - name: Publish GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.find_apk.outputs.apk }}
          generate_release_notes: true
