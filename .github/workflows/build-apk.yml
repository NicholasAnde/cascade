name: Build Android APK

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]
    tags: [ "v*", "release-*" ]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    env:
      APP_NAME: Cascade Canvassing
      ANDROID_SDK_PLATFORM: "platforms;android-34"
      ANDROID_BUILD_TOOLS: "build-tools;34.0.0"
      ANDROID_PLATFORM_TOOLS: "platform-tools"
      GRADLE_OPTS: "-Dorg.gradle.caching.debug=true -Dorg.gradle.jvmargs='-Xmx2g -Dfile.encoding=UTF-8'"

    steps:
      - name: Set up job
        run: echo "Starting build for $APP_NAME"

      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify Android wrapper exists
        run: |
          set -euo pipefail
          test -f android/gradlew || (echo "::error::Missing android/gradlew" && exit 1)
          test -f android/gradle/wrapper/gradle-wrapper.jar || (echo "::error::Missing gradle-wrapper.jar (must be committed)" && exit 1)
          test -f android/gradle/wrapper/gradle-wrapper.properties || (echo "::error::Missing gradle-wrapper.properties" && exit 1)

      - name: Prepare assets (ensure index.html and app.settings.json)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p android/app/src/main/assets
          if [[ -f "index.html" ]]; then
            cp index.html android/app/src/main/assets/index.html
          else
            echo "::warning::No index.html at repo root; creating placeholder"
            cat > android/app/src/main/assets/index.html <<'HTML'
            <!doctype html><html><head><meta charset="utf-8"><title>Cascade</title></head>
            <body><h1>Placeholder UI</h1></body></html>
            HTML
          fi
          if [[ -f "app.settings.json" ]]; then
            cp app.settings.json android/app/src/main/assets/app.settings.json
          else
            echo "::notice::Creating app.settings.json from env"
            cat > android/app/src/main/assets/app.settings.json <<JSON
            {
              "sheetsEndpoint": "${SHEETS_ENDPOINT:-}"
            }
            JSON
          fi
          ls -la android/app/src/main/assets

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Android SDK components
        run: |
          set -euo pipefail
          yes | sdkmanager --licenses >/dev/null
          sdkmanager "${ANDROID_SDK_PLATFORM}" "${ANDROID_BUILD_TOOLS}" "${ANDROID_PLATFORM_TOOLS}"

      # Only run signing if secrets are present
      - name: Decode keystore
        if: ${{ secrets.KEYSTORE != '' }}
        run: |
          set -euo pipefail
          echo "$KEYSTORE" | base64 -d > android/app/upload.keystore
        env:
          KEYSTORE: ${{ secrets.KEYSTORE }}

      - name: Configure signing (gradle.properties)
        if: ${{ secrets.KEYSTORE_PASSWORD != '' && secrets.KEY_ALIAS != '' && secrets.KEY_ALIAS_PASSWORD != '' }}
        run: |
          set -euo pipefail
          PROP_FILE="android/gradle.properties"
          {
            echo "MYAPP_STORE_FILE=app/upload.keystore"
            echo "MYAPP_STORE_PASSWORD=${KEYSTORE_PASSWORD}"
            echo "MYAPP_KEY_ALIAS=${KEY_ALIAS}"
            echo "MYAPP_KEY_PASSWORD=${KEY_ALIAS_PASSWORD}"
          } >> "$PROP_FILE"
          echo "Wrote signing props to $PROP_FILE"
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_ALIAS_PASSWORD: ${{ secrets.KEY_ALIAS_PASSWORD }}

      - name: Grant gradlew execute
        run: chmod +x android/gradlew

      - name: Setup Gradle (cache and summary)
        uses: gradle/actions/setup-gradle@v3
        with:
          add-job-summary: true
          cache-read-only: false
          cache-overwrite-existing: true
          gradle-home-cache-includes: |
            caches
            notifications
            jdks
          gradle-home-cache-excludes: |
            caches/build-cache-*
          cache-key-suffix: v2

      - name: Pre-warm Gradle deps
        working-directory: android
        run: |
          ./gradlew --version
          ./gradlew help --no-daemon --stacktrace --info

      - name: Show Android SDK status
        run: |
          echo "JAVA_HOME=$JAVA_HOME"
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT"
          sdkmanager --list | head -n 200 || true

      - name: Build release (verbose, bounded)
        working-directory: android
        timeout-minutes: 25
        env:
          GRADLE_OPTS: ${{ env.GRADLE_OPTS }}
        run: |
          set -euo pipefail
          ./gradlew --stop || true
          ./gradlew assembleRelease --no-daemon --stacktrace --info
          ./gradlew --stop || true

      - name: Locate APK
        id: find_apk
        run: |
          set -euo pipefail
          APK_PATH=$(find android/app/build/outputs/apk/release -name "*.apk" -type f | head -n 1 || true)
          if [[ -z "$APK_PATH" ]]; then
            echo "::error::APK not found in expected path"
            exit 1
          fi
          echo "apk=$APK_PATH" >> "$GITHUB_OUTPUT"
          echo "Found APK at $APK_PATH"

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: cascade-canvassing-release-apk
          path: ${{ steps.find_apk.outputs.apk }}
          if-no-files-found: error
          compression-level: 6
          retention-days: 14

      - name: Publish GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.find_apk.outputs.apk }}
          generate_release_notes: true
