name: Build Private APK

on:
  # Manual run button in the Actions tab
  workflow_dispatch:

  # Auto-run when you publish a Release in GitHub UI
  release:
    types: [published]

  # Also run on pushes to main and on version tags
  push:
    branches: ["main"]
    tags: ["v*"]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30   # Prevents “stuck for hours” runs

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # --- Sanity checks so we fail fast with a clear message ---
      - name: Verify Android wrapper exists
        run: |
          if [ ! -d "android/app/src/main" ]; then
            echo "::error::android/ wrapper not found at repo root. Expected android/app/src/main/**"
            exit 1
          fi
          if [ ! -f "android/gradlew" ]; then
            echo "::error::Gradle wrapper script (android/gradlew) is missing."
            exit 1
          fi

      # Prepare assets: copy index.html; make settings from secret if needed
      - name: Prepare assets (ensure index.html and app.settings.json)
        env:
          SHEETS_ENDPOINT: ${{ secrets.SHEETS_ENDPOINT }}
        run: |
          set -e
          mkdir -p android/app/src/main/assets

          # index.html must exist at repo root (same level as android/ and .github/)
          if [ -f "index.html" ]; then
            cp index.html android/app/src/main/assets/index.html
            echo "Copied index.html into assets/"
          else
            echo "::error::index.html not found at repo root."
            exit 1
          fi

          # app.settings.json - use file if present; else generate from secret
          if [ -f "app.settings.json" ]; then
            cp app.settings.json android/app/src/main/assets/app.settings.json
            echo "Copied app.settings.json into assets/"
          else
            if [ -n "$SHEETS_ENDPOINT" ]; then
              printf '%s\n' '{' \
                "  \"sheetsEndpoint\": \"${SHEETS_ENDPOINT}\"," \
                '  "cooldownDays": 90' \
              '}' > android/app/src/main/assets/app.settings.json
              echo "Created app.settings.json from SHEETS_ENDPOINT secret."
            else
              echo "::error::app.settings.json missing AND SHEETS_ENDPOINT secret not set."
              exit 1
            fi
          fi

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      # Accept licenses + install the exact SDK & build-tools versions your build needs
      - name: Install Android SDK components
        run: |
          yes | sdkmanager --licenses
          sdkmanager --install "platform-tools" "platforms;android-34" "build-tools;34.0.0"

      # Decode your signing keystore from GitHub Secrets
      - name: Decode keystore
        run: |
          set -e
          if [ -z "${{ secrets.KEYSTORE }}" ]; then
            echo "::error::KEYSTORE secret (Base64 keystore) is missing."
            exit 1
          fi
          echo "${{ secrets.KEYSTORE }}" | base64 -d > android/keystore.jks
          ls -l android/keystore.jks

      # Write signing values into android/gradle.properties (no heredocs)
      - name: Configure signing (gradle.properties)
        run: |
          {
            echo "MYAPP_UPLOAD_STORE_FILE=keystore.jks"
            echo "MYAPP_UPLOAD_STORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}"
            echo "MYAPP_UPLOAD_KEY_ALIAS=${{ secrets.KEY_ALIAS }}"
            echo "MYAPP_UPLOAD_KEY_PASSWORD=${{ secrets.KEY_ALIAS_PASSWORD }}"
          } >> android/gradle.properties
          echo "gradle.properties configured."

      - name: Grant gradlew execute
        run: chmod +x android/gradlew || true

      # Use Gradle build action (caching + better logs)
      - name: Build release (Gradle cached)
        uses: gradle/gradle-build-action@v3
        with:
          arguments: assembleRelease --stacktrace --no-daemon
          build-root-directory: android

      # For manual/push runs, keep an artifact on the run page
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: cascade_canvass_apk
          path: android/app/build/outputs/apk/release/*.apk

  # When you publish a tag or GitHub Release, attach the APK
  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'release'
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: cascade_canvass_apk
          path: dist

      - name: Attach APK to Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
